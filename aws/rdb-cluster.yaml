
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - AMI
          - SSHKEY
          - TICKINSTANCETYPE
      - Label:
          default: "Real-time Database Cluster Configuration"
        Parameters:
          - RDBINSTANCETYPE
          - SCALETHRESHOLD
          - ROLLTHRESHOLD
      - Label:
          default: "General Configuration"
        Parameters:
          - SUBNETID
          - VPCID

    ParameterLabels:
      AMI:
        default: "AMI Id"
      SSHKEY:
        default: "SSH Key"
      TICKINSTANCETYPE:
        default: "Tickerplant Instance Type"
      RDBINSTANCETYPE:
        default: "RDB Instance Type"
      SCALETHRESHOLD:
        default: "Scale Threshold"
      ROLLTHRESHOLD:
        default: "Roll Threshold"
      SUBNETID:
        default: "Subnet Id"
      VPCID:
        default: "VPC Id"

Parameters:
  AMI:
    Type: AWS::EC2::Image::Id
    Description: "Choose the AMI to use for the EC2 Instances"
  SSHKEY:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Choose the ssh key that will be used to log on to the EC2 instances"
  TICKINSTANCETYPE:
    Type: String
    ConstraintDescription: "Must be a valid EC2 Instance Type"
    Description: "Choose the Tickerplant's EC2 Instance Type"
  RDBINSTANCETYPE:
    Type: String
    ConstraintDescription: "Must be a valid EC2 Instance Type"
    Description: "Choose the RDB Cluster's EC2 Instance Type"
  SCALETHRESHOLD:
    Type: Number
    Description: "Choose the Memory Utilisation Percentage to scale up the Cluster"
    MinValue: 0
    MaxValue: 100
  ROLLTHRESHOLD:
    Type: Number
    Description: "Choose the Max Memory Utilisation Percentage for each RDB in the Cluster"
    MinValue: 0
    MaxValue: 100
  SUBNETID:
    Type: AWS::EC2::Subnet::Id
    Description: "Which Subnet should the EC2 Instances be deployed into"
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: "Which VPC should the EC2 Instances be deployed into"

Mappings:
  Constants:
    UserData:
      Bootstrap: |
        #!/bin/bash -x
        cd /opt/rdb-autoscaling
        git pull
        cd ~
        bash -x /opt/rdb-autoscaling/aws/app-userdata.sh

Resources:

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: 'IAMRole for the EC2 Instances in the Stack'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}.iam.policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - cloudwatch:PutMetricData
                  - ec2:CreateImage
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:DescribeAddresses
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:ClientWrite
                Resource: "*"
      RoleName: !Sub '${AWS::StackName}.iam.role'

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group to allow SSH and TCP access for EC2 servers'
      GroupName: !Sub '${AWS::Region}.${AWS::StackName}.ec2-sg'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref VPCID
  EC2SecurityGroupTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EC2SecurityGroup
    Properties:
      GroupId: !Ref EC2SecurityGroup
      FromPort: 5010
      IpProtocol: tcp
      ToPort: 5020
      SourceSecurityGroupId: !Ref EC2SecurityGroup

  TickASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 60
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref TickLaunchTemplate
        Version: 1
      MaxSize: 1
      MinSize: 0
      Tags:
        - Key: APP
          PropagateAtLaunch: True
          Value: tick-asg
      VPCZoneIdentifier:
        - !Ref SUBNETID

  TickLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                VolumeSize: 8
        IamInstanceProfile:
          Arn: !GetAtt IAMInstanceProfile.Arn
        ImageId: !Ref AMI
        InstanceType: !Ref TICKINSTANCETYPE
        KeyName: !Ref SSHKEY
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub '${AWS::Region}.ec2-instance.${AWS::StackName}.tick-asg'
        UserData:
          Fn::Base64:
            !FindInMap [ Constants, UserData, Bootstrap ]
      LaunchTemplateName: !Sub '${AWS::Region}-${AWS::StackName}-tick-asg-launch-template'


  RdbASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: [ TickASG ]
    Properties:
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 60
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref RdbLaunchTemplate
        Version: 1
      MaxSize: 50
      MinSize: 0
      Tags:
        - Key: APP
          PropagateAtLaunch: True
          Value: r-asg
      VPCZoneIdentifier:
        - !Ref SUBNETID

  RdbLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                VolumeSize: 8
        IamInstanceProfile:
          Arn: !GetAtt IAMInstanceProfile.Arn
        ImageId: !Ref AMI
        InstanceType: !Ref RDBINSTANCETYPE
        KeyName: !Ref SSHKEY
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub '${AWS::Region}.ec2-instance.${AWS::StackName}.r-asg'
        UserData:
          Fn::Base64:
            !FindInMap [ Constants, UserData, Bootstrap ]
      LaunchTemplateName: !Sub '${AWS::Region}-${AWS::StackName}-r-asg-launch-template'
